generator client {
  provider = "prisma-client-js"
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum SenderRole {
  USER
  ADMIN
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.MediumText
  expiresAt DateTime
}

model User {
  id          Int     @id @default(autoincrement())
  username    String  @unique @db.VarChar(255)
  password    String  @db.VarChar(255)
  fullName    String? @db.VarChar(255)
  address     String? @db.VarChar(255)
  phone       String? @db.VarChar(255)
  accountType String  @db.VarChar(50)
  avatar      String? @db.VarChar(255)

  role            Role              @relation(fields: [roleId], references: [id])
  roleId          Int
  cart            Cart?
  orders          Order[]
  notifications   Notification[]
  Review          Review[]
  ProductQuestion ProductQuestion[]

  @@map("users")
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(100)
  description String @db.VarChar(255)
  users       User[]

  @@map("roles")
}

model Product {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(255)
  price            Int
  discount         Int               @default(0)
  detailDesc       String            @db.MediumText
  shortDesc        String            @db.VarChar(255)
  quantity         Int
  sold             Int?              @default(0)
  factory          String            @db.VarChar(255)
  target           String            @db.VarChar(255)
  image            String?           @db.VarChar(255)
  CartDetails      CartDetail[]
  OrderDetails     OrderDetail[]
  Review           Review[]
  ProductQuestions ProductQuestion[]

  @@map("products")
}

model ProductQuestion {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  content   String
  createdAt DateTime @default(now())

  product Product                @relation(fields: [productId], references: [id])
  user    User                   @relation(fields: [userId], references: [id])
  replies ProductQuestionReply[]

  @@index([productId])
}

model Cart {
  id  Int @id @default(autoincrement())
  sum Int

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  cartDetails CartDetail[]

  @@map("carts")
}

model CartDetail {
  id       Int @id @default(autoincrement())
  quantity Int
  price    Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@map("cart_detail")
}

model Order {
  id             Int     @id @default(autoincrement())
  totalPrice     Int
  discountAmount Int     @default(0) // số tiền giảm giá
  couponCode     String? // mã giảm giá nếu có

  receiverAddress String      @db.VarChar(255)
  receiverName    String      @db.VarChar(255)
  receiverPhone   String      @db.VarChar(255)
  receiverNote    String      @db.VarChar(255)
  status          OrderStatus @default(PENDING)

  paymentMethod String
  paymentStatus String
  paymentRef    String?

  cancelReason String? @db.VarChar(255)

  user   User @relation(fields: [userId], references: [id])
  userId Int

  orderDetails OrderDetail[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("orders")
}

model Coupon {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  discount   Int // % giảm giá
  expiryDate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String   @db.VarChar(255)
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("notifications")
}

model OrderDetail {
  id       Int @id @default(autoincrement())
  price    Int
  quantity Int

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@map("order_detail")
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  slug      String   @unique @db.VarChar(255)
  content   String   @db.MediumText
  thumbnail String?  @db.VarChar(255)
  author    String?  @db.VarChar(100)
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  // Liên kết với Product & User
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([productId, userId])
}

model ProductQuestionReply {
  id         Int        @id @default(autoincrement())
  questionId Int
  userId     Int?
  role       SenderRole
  content    String
  createdAt  DateTime   @default(now())

  question ProductQuestion @relation(fields: [questionId], references: [id])
}

model ChatSession {
  id        Int      @id @default(autoincrement())
  productId Int?
  userId    Int?
  name      String
  gender    Gender
  status    String   @default("OPEN") // OPEN/CLOSED
  createdAt DateTime @default(now())

  messages ChatMessage[]
}

model ChatMessage {
  id        Int        @id @default(autoincrement())
  sessionId Int
  sender    SenderRole
  content   String
  createdAt DateTime   @default(now())
  isRead    Boolean    @default(false)

  session ChatSession @relation(fields: [sessionId], references: [id])

  @@index([sessionId])
}
