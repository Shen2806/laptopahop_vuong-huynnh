generator client {
  provider = "prisma-client-js"
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum SenderRole {
  USER
  ADMIN
}

enum StockType {
  IN
  OUT
  ADJUST
  ORDER_COMMIT
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AiRole {
  USER
  ASSISTANT
  SYSTEM
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.MediumText
  expiresAt DateTime
}

model AiChatSession {
  id         Int      @id @default(autoincrement())
  userId     Int?
  topic      String?  @db.VarChar(255)
  summary    String?  @db.Text // tóm tắt cuộn (rolling)
  status     String   @default("OPEN") // OPEN | CLOSED
  lastUsedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  messages AiChatMessage[]
  memories AiMemory[]

  @@index([userId, lastUsedAt])
}

model AiChatMessage {
  id        Int      @id @default(autoincrement())
  sessionId Int
  role      AiRole
  content   String   @db.Text
  tokens    Int? // optional
  createdAt DateTime @default(now())

  session   AiChatSession @relation(fields: [sessionId], references: [id])
  embedding AiEmbedding?
}

model AiMemory {
  id        Int       @id @default(autoincrement())
  userId    Int?
  sessionId Int?
  type      String    @db.VarChar(32) // PREFERENCE | FACT | EPHEMERAL
  key       String    @db.VarChar(255)
  value     String    @db.Text
  score     Float // độ “đáng nhớ”
  expiresAt DateTime?
  createdAt DateTime  @default(now())

  session     AiChatSession? @relation(fields: [sessionId], references: [id])
  AiEmbedding AiEmbedding[]

  @@index([userId, sessionId, type])
}

model AiEmbedding {
  id        Int  @id @default(autoincrement())
  messageId Int? @unique
  memoryId  Int?
  dim       Int
  // MySQL không có vector-native -> lưu JSON float[]
  vector    Json

  message AiChatMessage? @relation(fields: [messageId], references: [id])
  memory  AiMemory?      @relation(fields: [memoryId], references: [id])

  @@index([messageId])
  @@index([memoryId])
}

model User {
  id          Int     @id @default(autoincrement())
  username    String  @unique @db.VarChar(255)
  password    String  @db.VarChar(255)
  fullName    String? @db.VarChar(255)
  address     String? @db.VarChar(255)
  phone       String? @db.VarChar(255)
  accountType String  @db.VarChar(50)
  avatar      String? @db.VarChar(255)

  role            Role              @relation(fields: [roleId], references: [id])
  roleId          Int
  googleId        String?           @unique
  cart            Cart?
  orders          Order[]
  notifications   Notification[]
  Review          Review[]
  ProductQuestion ProductQuestion[]
  StockMovement   StockMovement[]

  @@map("users")
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(100)
  description String @db.VarChar(255)
  users       User[]

  @@map("roles")
}

model Product {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(255)
  price            Int
  discount         Int               @default(0)
  detailDesc       String            @db.MediumText
  shortDesc        String            @db.VarChar(255)
  quantity         Int
  sold             Int?              @default(0)
  factory          String            @db.VarChar(255)
  target           String            @db.VarChar(255)
  image            String?           @db.VarChar(255)
  CartDetails      CartDetail[]
  OrderDetails     OrderDetail[]
  Review           Review[]
  ProductQuestions ProductQuestion[]
  reorderLevel     Int               @default(0)
  stockMovements   StockMovement[]

  // --- Các cột mới ---
  cpu              String? @db.VarChar(255)
  ramGB            Int?
  storageGB        Int?
  storageType      String? @db.VarChar(50) // HDD | SSD | NVME
  screenResolution String? @db.VarChar(50) // FHD | QHD | 4K (hoặc "1920x1080")
  screenSizeInch   Float? // ví dụ 13.3, 14.0, 15.6
  featureTags      String? @db.VarChar(255) // ví dụ: |TOUCH|2IN1|TB4|FP|

  // Index khuyến nghị để lọc nhanh hơn:
  @@index([factory])
  @@index([cpu])
  @@index([ramGB])
  @@index([storageType, storageGB])
  @@index([screenResolution])
  @@index([screenSizeInch])
  @@map("products")
}

model StockMovement {
  id        Int       @id @default(autoincrement())
  productId Int
  qty       Int
  type      StockType
  note      String?   @db.VarChar(255)
  orderId   Int?
  actorId   Int?
  createdAt DateTime  @default(now())

  product Product @relation(fields: [productId], references: [id])
  actor   User?   @relation(fields: [actorId], references: [id])
}

model ProductQuestion {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  content   String
  createdAt DateTime @default(now())

  product Product                @relation(fields: [productId], references: [id])
  user    User                   @relation(fields: [userId], references: [id])
  replies ProductQuestionReply[]

  @@index([productId])
}

model Cart {
  id  Int @id @default(autoincrement())
  sum Int

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  cartDetails CartDetail[]

  @@map("carts")
}

model CartDetail {
  id       Int @id @default(autoincrement())
  quantity Int
  price    Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@map("cart_detail")
}

model Order {
  id             Int     @id @default(autoincrement())
  totalPrice     Int
  discountAmount Int     @default(0) // số tiền giảm giá
  couponCode     String? // mã giảm giá nếu có

  receiverAddress String      @db.VarChar(255)
  receiverName    String      @db.VarChar(255)
  receiverPhone   String      @db.VarChar(255)
  receiverNote    String      @db.VarChar(255)
  status          OrderStatus @default(PENDING)

  paymentMethod String
  paymentStatus String
  paymentRef    String?

  cancelReason String? @db.VarChar(255)

  user   User @relation(fields: [userId], references: [id])
  userId Int

  orderDetails OrderDetail[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("orders")
}

model Coupon {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  discount   Int // % giảm giá
  expiryDate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String   @db.VarChar(255)
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("notifications")
}

model OrderDetail {
  id       Int @id @default(autoincrement())
  price    Int
  quantity Int

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@map("order_detail")
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  slug      String   @unique @db.VarChar(255)
  content   String   @db.MediumText
  thumbnail String?  @db.VarChar(255)
  author    String?  @db.VarChar(100)
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  // Liên kết với Product & User
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([productId, userId])
}

model ProductQuestionReply {
  id         Int        @id @default(autoincrement())
  questionId Int
  userId     Int?
  role       SenderRole
  content    String
  createdAt  DateTime   @default(now())

  question ProductQuestion @relation(fields: [questionId], references: [id])
}

model ChatSession {
  id        Int      @id @default(autoincrement())
  productId Int?
  userId    Int?
  name      String
  gender    Gender
  status    String   @default("OPEN") // OPEN/CLOSED
  createdAt DateTime @default(now())

  messages ChatMessage[]
}

model ChatMessage {
  id        Int        @id @default(autoincrement())
  sessionId Int
  sender    SenderRole
  content   String
  createdAt DateTime   @default(now())
  isRead    Boolean    @default(false)

  session ChatSession @relation(fields: [sessionId], references: [id])

  @@index([sessionId])
}
