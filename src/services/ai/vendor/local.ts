// src/services/ai/vendor/local.ts
export type ChatMessage = { role: "system" | "user" | "assistant"; content: string };

/* ============ utils ============ */
function deaccent(s = "") {
    return s.normalize("NFD").replace(/\p{Diacritic}/gu, "");
}
function normLower(s = "") {
    return deaccent(s).toLowerCase();
}
function tokenize(s = ""): string[] {
    return normLower(s).replace(/[^a-z0-9\s]/g, " ").split(/\s+/).filter(Boolean);
}

/* ============ cheap embedding (hash-TF + L2) ============ */
function tfHashEmbed(text: string, dim = 512) {
    const toks = tokenize(text);
    const v = new Array<number>(dim).fill(0);
    for (const t of toks) {
        let h = 2166136261 >>> 0; // FNV-like
        for (let j = 0; j < t.length; j++) h = ((h ^ t.charCodeAt(j)) * 16777619) >>> 0;
        v[h % dim] += 1;
    }
    // L2 normalize
    let s = 0;
    for (const x of v) s += x * x;
    const n = Math.sqrt(s) || 1;
    return v.map((x) => x / n);
}

/* ============ domain helpers ============ */
const BRANDS = ["APPLE", "ASUS", "LENOVO", "DELL", "LG", "ACER", "HP", "MSI", "GIGABYTE", "ALIENWARE"];
const WANT_LIST_RE = /(li[e√™]Ã£t k√™|g[∆°]Ã£i [y√Ω]|danh\s*s[a√°]ch|recommend|g·ª£i √Ω|d[o√¥]ng|model)/i;
const WANT_STRONGEST_RE = /(maÃ£nh nh[a√¢ÃÅ]t|m·∫°nh nh·∫•t|best|kh[·ªßu]ng nh[a√¢ÃÅ]t|cao nh[a√¢ÃÅ]t|ƒë[i·ªâ]nh nh·∫•t)/i;

function detectTarget(t: string) {
    t = normLower(t);
    if (/doanh\s*nhan|doanh\s*nghi[e√™]Ã£p|business/.test(t)) return "DOANH-NHAN";
    if (/gaming|game|fps|144hz/.test(t)) return "GAMING";
    if (/v[aƒÉ]n\s*ph[√≤o]ng|office|sinh\s*vi[e√™]n|h[o·ªç]c/.test(t)) return "SINHVIEN-VANPHONG";
    if (/m[o√µ]ng|nh[e·∫π]|di\s*ch[u]y[e√™]Ãân|portable|ultrabook/.test(t)) return "MONG-NHE";
    if (/ƒë[o·ªì]\s*h[o·ªç]a|thi[e√™ÃÅ]t\s*k[e√™]|photoshop|premiere|d[u]Ã£ng phim|edit/.test(t)) return "THIET-KE-DO-HOA";
    return undefined;
}
function parseBrand(t: string) {
    const s = normLower(t);
    for (const b of BRANDS) if (s.includes(b.toLowerCase())) return b;
    return undefined;
}
function parseBudget(text: string) {
    const t = normLower(text).replace(/\./g, "").replace(/,/g, "").trim();
    // range: 15-25 | 15‚Äì25 | 15 ‚Äî 25 | 15 ƒë·∫øn 25 | 15 to 25
    let m = t.match(/(\d{1,3})\s*(?:-|‚Äì|‚Äî|to|t[o∆°]ÃÅi|toi|den|ƒë[e√™]ÃÅn)\s*(\d{1,3})\s*(?:tr|tri[e√™]u|m)?/);
    if (m) return { min: +m[1] * 1e6, max: +m[2] * 1e6 };
    // d∆∞·ªõi X
    m = t.match(/(?:d[u∆∞]·ªõi|<|<=)\s*(\d{1,3})\s*(?:tr|tri[e√™]u|m)?/);
    if (m) return { min: 0, max: +m[1] * 1e6 };
    // tr√™n X
    m = t.match(/(?:tr[e√™]n|>|>=)\s*(\d{1,3})\s*(?:tr|tri[e√™]u|m)?/);
    if (m) { const x = +m[1] * 1e6; return { min: x, max: x + 9e12 }; }
    // ~20 | t·∫ßm 20 | kho·∫£ng 20
    m = t.match(/(?:~|t[aƒÉ]m|kho[aƒÉ]ng|x[aÃÇ]ÃÅp x[i]Ãâ)?\s*(\d{1,3})\s*(?:tr|tri[e√™]u|m)?/);
    if (m) { const x = +m[1]; const pad = x >= 25 ? 5 : 3; return { min: (x - pad) * 1e6, max: (x + pad) * 1e6 }; }
    return undefined;
}
function hasNeed(text: string) { return !!detectTarget(text); }
function hasBudget(text: string) { return !!parseBudget(text); }
function isSmallTalk(text: string) {
    const t = normLower(text).trim();
    if (!t || t.length <= 3) return true;
    return /\b(alo|hello|hi|ch[a√†]o|xin ch[aÃÄ]o|yo|co ai|test|ping|√™|e)\b/.test(t);
}

/* ============ behavior blocks ============ */
function agentJSON(userText: string) {
    const target = detectTarget(userText);
    const brand = parseBrand(userText);
    const money = parseBudget(userText);
    const wantList = WANT_LIST_RE.test(userText);
    const wantStrongest = WANT_STRONGEST_RE.test(userText);

    if (isSmallTalk(userText) && !target && !brand && !money) {
        return {
            action: "reply",
            format: "cards",
            reply: 'M√¨nh ƒë√¢y üëã B·∫°n cho m√¨nh **ng√¢n s√°ch + nhu c·∫ßu + h√£ng** (vd: "ASUS gaming ~20tr") ƒë·ªÉ g·ª£i √Ω ch√≠nh x√°c nh√©.',
            suggestions: ["T∆∞ v·∫•n theo ng√¢n s√°ch", "G·ª£i √Ω gaming", "M√°y m·ªèng nh·∫π < 1.3kg"],
        };
    }
    if (wantStrongest) {
        return {
            action: "strongest",
            format: "cards",
            filters: { ...(brand ? { brand } : {}), ...(target ? { target } : {}), ...(money || {}) },
            reply: "",
            suggestions: ["So s√°nh v·ªõi m√°y kh√°c", "Xem th√™m gaming", "T∆∞ v·∫•n theo ng√¢n s√°ch"],
        };
    }
    if (wantList || (target && money)) {
        return {
            action: "search",
            format: "list",
            filters: { ...(brand ? { brand } : {}), ...(target ? { target } : {}), ...(money || {}) },
            reply: "",
            suggestions: ["Ch·ªçn m√°y m·∫°nh nh·∫•t", "Hi·ªÉn th·ªã d·∫°ng th·∫ª", "L·ªçc theo < 20tr"],
        };
    }
    return {
        action: "reply",
        format: "cards",
        reply: "B·∫°n c·∫ßn m√°y cho m·ª•c ƒë√≠ch g√¨ (gaming/vƒÉn ph√≤ng/ƒë·ªì ho·∫°/di chuy·ªÉn)? Ng√¢n s√°ch b·∫°n d·ª± ki·∫øn kho·∫£ng bao nhi√™u (VNƒê)?",
        suggestions: ["G·ª£i √Ω gaming ~20tr", "VƒÉn ph√≤ng ‚â§ 15tr", "M·ªèng nh·∫π < 1.3kg"],
    };
}

function polishVN(raw: string) {
    const s = (raw || "").trim();
    if (!s) return s;
    const lines = s.split(/\r?\n/).map((x) => x.trim()).filter(Boolean);
    const bullets = lines.filter((x) => /^[-‚Ä¢]/.test(x)).slice(0, 6);
    const head = lines.find((x) => !/^[-‚Ä¢]/.test(x)) || "G·ª£i √Ω nhanh (gi√° tham kh·∫£o th·ªã tr∆∞·ªùng):";
    const tail =
        lines.find((x) => /\bL[·ªù∆°]i khuy[e√™]n\b/i.test(x)) ||
        "**L·ªùi khuy√™n:** ∆Øu ti√™n RAM 16GB, SSD ‚â•512GB; ki·ªÉm tra t·∫£n nhi·ªát & b·∫£o h√†nh.";
    let out = head + "\n";
    if (bullets.length) out += bullets.join("\n") + "\n";
    out += tail;
    return out;
}

function memoryExtract(historySnippet: string, userMsg: string, assistantMsg: string) {
    const items: any[] = [];
    const brand = parseBrand(userMsg) || parseBrand(assistantMsg);
    if (brand) items.push({ type: "PREFERENCE", key: "pref.brand", value: brand, score: 0.8 });

    const t = detectTarget(userMsg) || detectTarget(assistantMsg);
    if (t) items.push({ type: "PREFERENCE", key: "pref.target", value: t, score: 0.8 });

    const b = parseBudget(userMsg) || parseBudget(assistantMsg);
    if (b) items.push({ type: "EPHEMERAL", key: "filter.budget", value: JSON.stringify(b), score: 0.5, ttl_hours: 2 });

    if (/sinh\s*vi[e√™]n\s*it|lap\s*trinh|dev/i.test(normLower(userMsg + " " + historySnippet))) {
        items.push({ type: "FACT", key: "user.role", value: "STUDENT_IT", score: 0.7 });
    }
    return JSON.stringify({ items });
}

function answerGuard(userMsg: string, context: string, answer: string) {
    const ok = !!answer && answer.length >= 20;
    if (ok) return JSON.stringify({ pass: true, revised: "" });

    const enoughNeed = hasNeed(userMsg) || hasNeed(context);
    const enoughMoney = hasBudget(userMsg) || hasBudget(context);
    let revised = answer || "";
    if (!enoughNeed || !enoughMoney) {
        revised = 'B·∫°n cho m√¨nh **nhu c·∫ßu ch√≠nh** (gaming/vƒÉn ph√≤ng/ƒë·ªì ho·∫°/di chuy·ªÉn) v√† **ng√¢n s√°ch (VNƒê)** nh√© (vd: ASUS gaming ~20tr).';
    } else {
        revised = 'G·ª£i √Ω nhanh: i5/R5 H, RAM 16GB, SSD 512GB, m√†n 15.6" 144Hz. **L·ªùi khuy√™n:** ∆Øu ti√™n RAM dual-channel, ki·ªÉm tra t·∫£n nhi·ªát.';
    }
    return JSON.stringify({ pass: false, revised });
}

/* ============ router by system intent ============ */
function routeChat(messages: ChatMessage[]): string {
    const sys = messages.find((m) => m.role === "system")?.content || "";
    const userLast = (messages.slice().reverse().find((m) => m.role === "user")?.content || "").trim();

    // Agent JSON
    if (/Ch·ªâ (ƒë∆∞·ª£c )?xu·∫•t M·ªòT D√íNG JSON|Ch·ªâ tr·∫£ JSON|Only output ONE LINE JSON/i.test(sys)) {
        return JSON.stringify(agentJSON(userLast));
    }
    // Bi√™n t·∫≠p
    if (/BI√äN T[·∫¨A]P VI[E√ä]T|polish/i.test(sys)) {
        const raw = userLast || messages.find((m) => m.role === "assistant")?.content || "";
        return polishVN(raw);
    }
    // Tr√≠ch xu·∫•t k√Ω ·ª©c
    if (/TR[IÃÅI]CH XU[·∫§A]T K[√ùY] ·ª®C|K[Y√ù] ·ª®C/i.test(sys)) {
        const hist = messages.filter((m) => m.role !== "system").map((m) => `${m.role.toUpperCase()}: ${m.content}`).join("\n");
        const u = userLast;
        const a = messages.slice().reverse().find((m) => m.role === "assistant")?.content || "";
        return memoryExtract(hist, u, a);
    }
    // Ki·ªÉm duy·ªát
    if (/KI·ªÇM DUY·ªÜT|KIEM DUYET|moderation|review/i.test(sys)) {
        const joined = messages.map((m) => m.content).join("\n");
        const userMsg = /# USER\s*\n([\s\S]*?)\n\s*#/i.exec(joined)?.[1] || userLast;
        const context = /# NG·ªÆ C·∫¢NH\s*\n([\s\S]*?)\n\s*#/i.exec(joined)?.[1] || "";
        const answer = /# ANSWER\s*\n([\s\S]*)$/i.exec(joined)?.[1] || "";
        return answerGuard(userMsg, context, answer);
    }

    // Fallback heuristic
    if (hasNeed(userLast) && hasBudget(userLast)) {
        return [
            "G·ª£i √Ω nhanh (**gi√° tham kh·∫£o th·ªã tr∆∞·ªùng**):",
            "- **Ph∆∞∆°ng √°n 1 (c√¢n b·∫±ng)**: i5/R5 H / RAM 16GB / SSD 512GB / 15.6\" 144Hz",
            "- **Ph∆∞∆°ng √°n 2 (∆∞u GPU)**: i7/R7 + RTX 4050‚Üë / RAM 16‚Äì32GB / SSD 1TB",
            "**L·ªùi khuy√™n:** ∆Øu ti√™n RAM 16GB dual-channel; ki·ªÉm tra t·∫£n nhi·ªát & b·∫£o h√†nh.",
        ].join("\n");
    }
    return 'B·∫°n m√¥ t·∫£ gi√∫p m√¨nh **nhu c·∫ßu ch√≠nh** (gaming/vƒÉn ph√≤ng/ƒë·ªì ho·∫°/di chuy·ªÉn) v√† **ng√¢n s√°ch (VNƒê)** nh√©. V√≠ d·ª•: ‚ÄúASUS gaming ~20tr‚Äù.';
}

/* ============ public provider ============ */
export class LocalProvider {
    async embed(text: string) {
        const embedding = tfHashEmbed(text, 512);
        return { embedding, dim: embedding.length };
    }
    async chat(messages: ChatMessage[], _opts?: { temperature?: number; maxTokens?: number }) {
        return { content: routeChat(messages) };
    }
}
