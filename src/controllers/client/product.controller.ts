import { prisma } from "config/client";
import { Request, Response } from "express";
import { addProductToCart, DeleteProductInCart, getOrderHistory, getProductById, getProductInCart, handlePlaceOrder, updateCartDetailBeforeCheckOut } from "services/client/item.service";
import { getIO } from "src/socket";
import { $Enums } from "@prisma/client"; // th√™m n·∫øu ch∆∞a c√≥
import { paymentGateway } from "services/paymentGateway";
// Nh√£n ti·∫øng Vi·ªát cho tr·∫°ng th√°i
const STATUS_LABEL_VI: Record<string, string> = {
    PENDING: "Ch·ªù x·ª≠ l√Ω",
    CONFIRMED: "ƒê√£ x√°c nh·∫≠n ƒë∆°n",
    SHIPPING: "ƒêang v·∫≠n chuy·ªÉn",
    OUT_FOR_DELIVERY: "ƒêang giao h√†ng",
    DELIVERED: "ƒê√£ giao h√†ng",
    CANCELED: "ƒê√£ h·ªßy",
};

// Th·ª© t·ª± c√°c b∆∞·ªõc (kh√¥ng t√≠nh CANCELED)
const ORDER_STEPS: $Enums.OrderStatus[] = [
    "PENDING",
    "CONFIRMED",
    "SHIPPING",
    "OUT_FOR_DELIVERY",
    "DELIVERED",
    "CANCELED"
];

const getProductPage = async (req: Request, res: Response) => {
    const { id } = req.params;
    const product = await getProductById(+id);
    if (!product) {
        return res.status(404).render("status/404.ejs", { user: (req as any).user || null });
    }

    // ====== üîΩ CODE 2: c·∫≠p nh·∫≠t cookie recent_products üîΩ
    const KEY = "recent_products";

    let ids: number[] = [];
    try {
        ids = JSON.parse((req as any).cookies?.[KEY] || "[]");
    } catch {
        ids = [];
    }
    // lo·∫°i b·ªè id hi·ªán t·∫°i n·∫øu ƒë√£ c√≥, r·ªìi ƒë∆∞a l√™n ƒë·∫ßu
    ids = ids.filter((x) => x !== product.id);
    ids.unshift(product.id);
    // gi·ªØ t·ªëi ƒëa 20 id (tu·ª≥ b·∫°n)
    ids = ids.slice(0, 20);

    res.cookie(KEY, JSON.stringify(ids), {
        httpOnly: false,     // ƒë·ªÉ client JS ƒë·ªçc ƒë∆∞·ª£c (n·∫øu c·∫ßn)
        sameSite: "lax",
        maxAge: 1000 * 60 * 60 * 24 * 30, // 30 ng√†y
        path: "/",
    });
    // ====== üîº CODE 2: c·∫≠p nh·∫≠t cookie recent_products üîº
    return res.render("product/detail", {
        product
    });
}

const postAddProductToCart = async (req: Request, res: Response) => {
    const { id } = req.params;
    const user = req.user;

    if (user) {
        await addProductToCart(1, +id, user);
    } else {
        // not login
        return res.redirect("/login");
    }

    return res.redirect("/")
}

const getCartPage = async (req: Request, res: Response) => {
    const user = req.user;
    if (!user) return res.redirect("/login");

    // L·∫•y cart t·ª´ DB
    const cart = await prisma.cart.findUnique({
        where: { userId: user.id },
        include: { cartDetails: { include: { product: true } } } // l·∫•y lu√¥n s·∫£n ph·∫©m
    });
    const cartDetails = await getProductInCart(+user.id)
    const totalPrice = cartDetails?.map(item => +item.price * +item.quantity)?.reduce((a, b) => a + b, 0)
    const cartId = cartDetails.length ? cartDetails[0].cartId : 0
    return res.render("product/cart", {
        cart, cartDetails, totalPrice, cartId
    });
}

const postDeleteProductInCart = async (req: Request, res: Response) => {
    const { id } = req.params;
    const user = req.user;

    if (user) {
        await DeleteProductInCart(+id, user.id, user.sumCart);
    } else {
        return res.redirect("/login");
    }
    return res.redirect("/cart")
}

// GET /checkout
const getCheckOutPage = async (req: Request, res: Response) => {
    const user = (req as any).user;
    if (!user) return res.redirect("/login");

    try {
        // ∆Øu ti√™n "Mua ngay" khi c√≥ session buyNow ho·∫∑c query ?mode=buy
        const wantBuyMode = req.query.mode === "buy" || Boolean(req.session?.buyNow);

        if (wantBuyMode && req.session?.buyNow) {
            const { productId, quantity } = req.session.buyNow;
            const pid = Number(productId);
            const qtyReq = Math.max(1, Number(quantity) || 1);

            // L·∫•y s·∫£n ph·∫©m
            const p = await prisma.product.findUnique({
                where: { id: pid },
                select: {
                    id: true,
                    name: true,
                    price: true,
                    discount: true,
                    quantity: true,
                    image: true,
                },
            });

            if (!p) {
                // Kh√¥ng c√≤n s·∫£n ph·∫©m -> b·ªè buyNow & fallback v·ªÅ gi·ªè
                req.session.buyNow = undefined;
                return res.redirect("/cart");
            }

            const stock = Number(p.quantity) || 0;
            const qty = Math.min(qtyReq, stock);
            if (qty <= 0) {
                // H·∫øt h√†ng -> b·ªè buyNow v√† quay l·∫°i trang s·∫£n ph·∫©m
                req.session.buyNow = undefined;
                return res.redirect(`/product/${pid}`);
            }

            // T√≠nh ti·ªÅn: tr∆∞·ªõc/sau KM
            const price = Number(p.price) || 0;
            const discount = Number(p.discount || 0); // %
            const unitAfter = discount > 0 ? Math.round(price * (100 - discount) / 100) : price;

            const subtotalBefore = price * qty;
            const subtotalAfter = unitAfter * qty;

            // Ng∆∞·ª°ng coupon gi·ªØ nguy√™n logic c·ªßa b·∫°n
            const coupons =
                subtotalAfter >= 25_000_000
                    ? await prisma.coupon.findMany({
                        where: { expiryDate: { gte: new Date() } },
                        orderBy: { updatedAt: "desc" },
                    })
                    : [];

            // Gi·∫£ l·∫≠p c·∫•u tr√∫c cartDetails ƒë√∫ng view (product + quantity)
            const cartDetails = [
                {
                    id: 0,            // dummy
                    cartId: 0,        // dummy
                    productId: p.id,
                    quantity: qty,
                    product: p,       // view d√πng cd.product.*
                },
            ];

            return res.render("product/checkout", {
                cartDetails,
                subtotalBefore,
                totalPrice: subtotalAfter, // base sau KM SP
                coupons,
                mode: "buy",               // ƒë·ªÉ view bi·∫øt ƒëang ·ªü buy-mode (n·∫øu b·∫°n mu·ªën hi·ªÉn th·ªã kh√°c)
            });
        }

        // ==== M·∫∑c ƒë·ªãnh: Checkout theo GI·ªé H√ÄNG (logic g·ªëc c·ªßa b·∫°n) ====
        // 1) T√¨m cart theo userId
        const cart = await prisma.cart.findFirst({
            where: { userId: Number(user.id) },
            select: { id: true },
        });

        if (!cart) {
            return res.render("product/checkout", {
                cartDetails: [],
                subtotalBefore: 0,
                totalPrice: 0,
                coupons: [],
                mode: "cart",
            });
        }

        const cartId = cart.id;

        // 2) L·∫•y chi ti·∫øt gi·ªè + product
        const cartDetails = await prisma.cartDetail.findMany({
            where: { cartId },
            include: { product: true },
        });

        // 3) T·ªïng tr∆∞·ªõc KM
        const subtotalBefore = cartDetails.reduce((sum, cd) => {
            return sum + Number(cd.product.price) * Number(cd.quantity);
        }, 0);

        // 4) T·ªïng sau KM t·ª´ng SP
        const subtotalAfter = cartDetails.reduce((sum, cd) => {
            const price = Number(cd.product.price);
            const discount = Number(cd.product.discount || 0);
            const unit = discount > 0 ? Math.round(price * (100 - discount) / 100) : price;
            return sum + unit * Number(cd.quantity);
        }, 0);

        // 5) Coupon n·∫øu ƒë·∫°t ng∆∞·ª°ng
        let coupons: any[] = [];
        if (subtotalAfter >= 25_000_000) {
            coupons = await prisma.coupon.findMany({
                where: { expiryDate: { gte: new Date() } },
                orderBy: { updatedAt: "desc" },
            });
        }

        // 6) Render
        return res.render("product/checkout", {
            cartDetails,
            subtotalBefore,
            totalPrice: subtotalAfter,
            coupons,
            mode: "cart",
        });
    } catch (e) {
        console.error("getCheckOutPage error:", e);
        return res.redirect("/cart");
    }
};


const postHandleCartToCheckOut = async (req: Request, res: Response) => {
    const user = (req as any).user;
    if (!user) return res.redirect("/login");

    try {
        const cartId = Number(req.body.cartId);
        if (!Number.isFinite(cartId)) return res.redirect("/cart");

        // cartDetails c√≥ th·ªÉ l√† m·∫£ng ho·∫∑c object d·∫°ng { "0": {id, quantity}, ... }
        const raw = req.body?.cartDetails ?? [];
        const items: Array<{ id: any; quantity: any }> = Array.isArray(raw) ? raw : Object.values(raw);

        await updateCartDetailBeforeCheckOut(items, cartId);

        return res.redirect("/checkout");
    } catch (err) {
        console.error("postHandleCartToCheckOut error:", err);
        return res.redirect("/cart");
    }
};

// const postPlaceOrder = async (req: Request, res: Response) => {
//     const user = (req as any).user;
//     if (!user) return res.redirect("/login");

//     const {
//         receiverName,
//         receiverAddress,
//         receiverPhone,
//         receiverNote,
//         couponCode,
//         mode, // <-- th√™m mode t·ª´ form: 'buy' | 'cart'
//     } = req.body;

//     // Chu·∫©n ho√° coupon
//     const coupon = (couponCode || "").trim() || null;

//     try {
//         // ===== BUY MODE: ƒë·∫∑t h√†ng tr·ª±c ti·∫øp theo session.buyNow =====
//         if (mode === "buy") {
//             const ticket = req.session?.buyNow;
//             if (!ticket) {
//                 // Kh√¥ng c√≥ "v√©" mua ngay -> tr·∫£ v·ªÅ checkout buy-mode ƒë·ªÉ user thao t√°c l·∫°i
//                 (req.session as any).messages = [
//                     { type: "warning", text: "Phi√™n 'Mua ngay' ƒë√£ h·∫øt h·∫°n. Vui l√≤ng thao t√°c l·∫°i." },
//                 ];
//                 return res.redirect("/checkout?mode=buy");
//             }

//             // B·∫°n c√≥ th·ªÉ truy·ªÅn tr·ª±c ti·∫øp m·∫£ng items v√†o service
//             // (C·∫ßn c·∫≠p nh·∫≠t handlePlaceOrder ƒë·ªÉ h·ªó tr·ª£ 'items' & 'mode')
//             const result = await handlePlaceOrder({
//                 userId: Number(user.id),
//                 receiverName,
//                 receiverAddress,
//                 receiverPhone,
//                 receiverNote,
//                 couponCode: coupon,
//                 mode: "buy", // <-- g·ª£i √Ω th√™m param cho service
//                 items: [
//                     {
//                         productId: Number(ticket.productId),
//                         quantity: Math.max(1, Number(ticket.quantity) || 1),
//                     },
//                 ],
//             } as any); // n·∫øu TS k√™u g√†o do ch∆∞a m·ªü r·ªông type th√¨ t·∫°m any

//             if (!result?.success) {
//                 (req.session as any).messages = [
//                     { type: "danger", text: result?.error || "ƒê·∫∑t h√†ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!" },
//                 ];
//                 return res.redirect("/checkout?mode=buy");
//             }

//             // Xo√° v√© 'Mua ngay' ƒë·ªÉ tr√°nh reuse
//             req.session.buyNow = undefined;

//             // ‚úÖ Emit cho ADMIN
//             try {
//                 const io = getIO();
//                 const payload = {
//                     orderId: result.orderId,
//                     userId: Number(user.id),
//                     customerName: user.fullName || user.username || `User #${user.id}`,
//                     totalPrice: result.totalPrice ?? null, // khuy·∫øn ngh·ªã service tr·∫£ v·ªÅ
//                     mode: "buy",
//                     createdAt: new Date().toISOString(),
//                 };
//                 io.to("admins").emit("new-order", payload);
//             } catch (e) {
//                 console.error("emit new-order error:", e);
//             }

//             return res.redirect(`/thanks`);
//         }

//         // ===== CART MODE: logic c≈© =====
//         const result = await handlePlaceOrder({
//             userId: Number(user.id),
//             receiverName,
//             receiverAddress,
//             receiverPhone,
//             receiverNote,
//             couponCode: coupon,
//             mode: "cart", // <-- g·ª£i √Ω th√™m param cho service (kh√¥ng b·∫Øt bu·ªôc)
//         } as any);

//         if (!result?.success) {
//             (req.session as any).messages = [
//                 { type: "danger", text: result?.error || "ƒê·∫∑t h√†ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!" },
//             ];
//             return res.redirect("/checkout");
//         }

//         // ‚úÖ Emit cho ADMIN bi·∫øt c√≥ ƒë∆°n m·ªõi (gi·ªØ nguy√™n)
//         try {
//             const io = getIO();
//             const payload = {
//                 orderId: result.orderId,
//                 userId: Number(user.id),
//                 customerName: user.fullName || user.username || `User #${user.id}`,
//                 totalPrice: result.totalPrice ?? null,
//                 mode: "cart",
//                 createdAt: new Date().toISOString(),
//             };
//             io.to("admins").emit("new-order", payload);
//         } catch (e) {
//             console.error("emit new-order error:", e);
//         }

//         return res.redirect(`/thanks`);
//     } catch (e) {
//         console.error("postPlaceOrder error:", e);
//         (req.session as any).messages = [{ type: "danger", text: "C√≥ l·ªói h·ªá th·ªëng. Th·ª≠ l·∫°i sau." }];
//         // Khi l·ªói trong buy-mode th√¨ quay l·∫°i buy-mode cho ƒë√∫ng tr·∫£i nghi·ªám
//         return res.redirect(mode === "buy" ? "/checkout?mode=buy" : "/checkout");
//     }
// };



const toInt = (v: any) => {
    const n = Number(v);
    return Number.isFinite(n) ? Math.floor(n) : 0;
};
// b·∫£n ch√≠nh
// const postPlaceOrder = async (req: Request, res: Response) => {
//     const user: any = (req as any).user;
//     if (!user) return res.redirect("/login");

//     const {
//         receiverName,
//         receiverAddress,
//         receiverPhone,
//         receiverNote,
//         couponCode,
//         mode: modeRaw, // 'buy' | 'cart'
//     } = req.body;

//     // sanitize
//     const coupon = (couponCode || "").trim() || null;
//     const mode: "buy" | "cart" = modeRaw === "buy" ? "buy" : "cart";

//     // helper push message
//     const pushMsg = (type: "danger" | "warning" | "success", text: string) => {
//         const sess: any = (req as any).session || ((req as any).session = {});
//         if (!Array.isArray(sess.messages)) sess.messages = [];
//         sess.messages.push({ type, text });
//     };

//     try {
//         // =========================
//         // ======== BUY MODE =======
//         // =========================
//         if (mode === "buy") {
//             const ticket: any = (req as any).session?.buyNow;
//             if (!ticket) {
//                 pushMsg("warning", "Phi√™n 'Mua ngay' ƒë√£ h·∫øt h·∫°n. Vui l√≤ng thao t√°c l·∫°i.");
//                 return res.redirect("/checkout?mode=buy");
//             }

//             const pid = toInt(ticket.productId);
//             const qty = Math.max(1, toInt(ticket.quantity));
//             if (!pid || !qty) {
//                 pushMsg("warning", "D·ªØ li·ªáu 'Mua ngay' kh√¥ng h·ª£p l·ªá. Vui l√≤ng thao t√°c l·∫°i.");
//                 return res.redirect("/checkout?mode=buy");
//             }

//             const result = await handlePlaceOrder({
//                 userId: Number(user.id),
//                 receiverName,
//                 receiverAddress,
//                 receiverPhone,
//                 receiverNote,
//                 couponCode: coupon,
//                 mode: "buy",
//                 items: [{ productId: pid, quantity: qty }],
//             });

//             if (!result?.success) {
//                 pushMsg("danger", result?.error || "ƒê·∫∑t h√†ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!");
//                 return res.redirect("/checkout?mode=buy");
//             }

//             // Clear v√© buyNow ƒë·ªÉ tr√°nh reuse
//             (req as any).session.buyNow = undefined;

//             // Emit cho admin
//             try {
//                 const io = getIO();
//                 io.to("admins").emit("new-order", {
//                     orderId: result.orderId,
//                     userId: Number(user.id),
//                     customerName: user.fullName || user.username || `User #${user.id}`,
//                     totalPrice: result.totalPrice ?? null,
//                     mode: "buy",
//                     createdAt: new Date().toISOString(),
//                 });
//             } catch (e) {
//                 console.error("emit new-order error:", e);
//             }

//             return res.redirect("/thanks");
//         }

//         // =========================
//         // ======= CART MODE =======
//         // =========================
//         const result = await handlePlaceOrder({
//             userId: Number(user.id),
//             receiverName,
//             receiverAddress,
//             receiverPhone,
//             receiverNote,
//             couponCode: coupon,
//             mode: "cart",
//         });

//         if (!result?.success) {
//             pushMsg("danger", result?.error || "ƒê·∫∑t h√†ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!");
//             return res.redirect("/checkout");
//         }

//         // Emit cho admin
//         try {
//             const io = getIO();
//             io.to("admins").emit("new-order", {
//                 orderId: result.orderId,
//                 userId: Number(user.id),
//                 customerName: user.fullName || user.username || `User #${user.id}`,
//                 totalPrice: result.totalPrice ?? null,
//                 mode: "cart",
//                 createdAt: new Date().toISOString(),
//             });
//         } catch (e) {
//             console.error("emit new-order error:", e);
//         }

//         return res.redirect("/thanks");
//     } catch (e) {
//         console.error("postPlaceOrder error:", e);
//         const back = mode === "buy" ? "/checkout?mode=buy" : "/checkout";
//         const sess: any = (req as any).session || ((req as any).session = {});
//         sess.messages = [{ type: "danger", text: "C√≥ l·ªói h·ªá th·ªëng. Th·ª≠ l·∫°i sau." }];
//         return res.redirect(back);
//     }
// };
const postPlaceOrder = async (req: Request, res: Response) => {
    const user: any = (req as any).user;
    if (!user) return res.redirect("/login");

    const {
        receiverName,
        receiverAddress,
        receiverPhone,
        receiverNote,
        couponCode,
        mode: modeRaw,            // 'buy' | 'cart'
        paymentMethod: pmRaw,     // 'ONLINE' | 'COD' (t·ª´ form)
    } = req.body;

    const coupon = (couponCode || "").trim() || null;
    const mode: "buy" | "cart" = modeRaw === "buy" ? "buy" : "cart";
    const paymentMethod = String(pmRaw || "").toUpperCase();

    const pushMsg = (type: "danger" | "warning" | "success", text: string) => {
        const sess: any = (req as any).session || ((req as any).session = {});
        if (!Array.isArray(sess.messages)) sess.messages = [];
        sess.messages.push({ type, text });
    };

    // Helper build absolute return URL + IP
    const baseUrl = `${req.protocol}://${req.get("host")}`;
    const returnUrl = `${baseUrl}/payment/return`;
    const ipAddr =
        (req.headers["x-forwarded-for"] as string)?.split(",")[0]?.trim() ||
        (req.socket as any)?.remoteAddress ||
        req.ip ||
        "127.0.0.1";

    try {
        // =========================
        // ======== BUY MODE =======
        // =========================
        if (mode === "buy") {
            const ticket: any = (req as any).session?.buyNow;
            if (!ticket) {
                pushMsg("warning", "Phi√™n 'Mua ngay' ƒë√£ h·∫øt h·∫°n. Vui l√≤ng thao t√°c l·∫°i.");
                return res.redirect("/checkout?mode=buy");
            }

            const pid = toInt(ticket.productId);
            const qty = Math.max(1, toInt(ticket.quantity));
            if (!pid || !qty) {
                pushMsg("warning", "D·ªØ li·ªáu 'Mua ngay' kh√¥ng h·ª£p l·ªá. Vui l√≤ng thao t√°c l·∫°i.");
                return res.redirect("/checkout?mode=buy");
            }

            const result = await handlePlaceOrder({
                userId: Number(user.id),
                receiverName,
                receiverAddress,
                receiverPhone,
                receiverNote,
                couponCode: coupon,
                mode: "buy",
                items: [{ productId: pid, quantity: qty }],
            });

            if (!result?.success) {
                pushMsg("danger", result?.error || "ƒê·∫∑t h√†ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!");
                return res.redirect("/checkout?mode=buy");
            }

            // Clear v√© buyNow ƒë·ªÉ tr√°nh reuse
            (req as any).session.buyNow = undefined;

            // Emit cho admin
            try {
                const io = getIO();
                io.to("admins").emit("new-order", {
                    orderId: result.orderId,
                    userId: Number(user.id),
                    customerName: user.fullName || user.username || `User #${user.id}`,
                    totalPrice: result.totalPrice ?? null,
                    mode: "buy",
                    createdAt: new Date().toISOString(),
                });
            } catch (e) {
                console.error("emit new-order error:", e);
            }

            // N·∫øu ng∆∞·ªùi d√πng ch·ªçn ONLINE ‚Üí redirect VNPAY
            if (paymentMethod === "ONLINE") {
                try {
                    const gw = paymentGateway();
                    const amount = Number(result.totalPrice || 0);
                    await prisma.order.update({
                        where: { id: result.orderId! },
                        data: { paymentMethod: "ONLINE", paymentStatus: "PENDING" },
                    });
                    const { url } = await gw.createPaymentSession({
                        orderId: result.orderId!,
                        amount,
                        returnUrl,
                        ipAddr: String(ipAddr),
                    });
                    return res.redirect(url);
                } catch (err) {
                    console.error("start payment (buy) error:", err);
                    return res.redirect(`/thanks?orderId=${result.orderId}`);
                }
            }

            // COD ‚Üí thanks
            return res.redirect(`/thanks?orderId=${result.orderId}`);
        }

        // =========================
        // ======= CART MODE =======
        // =========================
        const result = await handlePlaceOrder({
            userId: Number(user.id),
            receiverName,
            receiverAddress,
            receiverPhone,
            receiverNote,
            couponCode: coupon,
            mode: "cart",
        });

        if (!result?.success) {
            pushMsg("danger", result?.error || "ƒê·∫∑t h√†ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!");
            return res.redirect("/checkout");
        }

        // Emit cho admin
        try {
            const io = getIO();
            io.to("admins").emit("new-order", {
                orderId: result.orderId,
                userId: Number(user.id),
                customerName: user.fullName || user.username || `User #${user.id}`,
                totalPrice: result.totalPrice ?? null,
                mode: "cart",
                createdAt: new Date().toISOString(),
            });
        } catch (e) {
            console.error("emit new-order error:", e);
        }

        // ONLINE ‚Üí redirect VNPAY
        if (paymentMethod === "ONLINE") {
            try {
                const gw = paymentGateway();
                const amount = Number(result.totalPrice || 0);
                await prisma.order.update({
                    where: { id: result.orderId! },
                    data: { paymentMethod: "ONLINE", paymentStatus: "PENDING" },
                });
                const { url } = await gw.createPaymentSession({
                    orderId: result.orderId!,
                    amount,
                    returnUrl,
                    ipAddr: String(ipAddr),
                });
                return res.redirect(url);
            } catch (err) {
                console.error("start payment (cart) error:", err);
                return res.redirect(`/thanks?orderId=${result.orderId}`);
            }
        }

        return res.redirect(`/thanks?orderId=${result.orderId}`);
    } catch (e) {
        console.error("postPlaceOrder error:", e);
        const back = mode === "buy" ? "/checkout?mode=buy" : "/checkout";
        const sess: any = (req as any).session || ((req as any).session = {});
        sess.messages = [{ type: "danger", text: "C√≥ l·ªói h·ªá th·ªëng. Th·ª≠ l·∫°i sau." }];
        return res.redirect(back);
    }
};



const getThanksPage = async (req: Request, res: Response) => {
    let order: any = null;

    // N·∫øu b·∫°n c√≥ orderId (param/query/session) th√¨ th·ª≠ load, kh√¥ng c√≥ c≈©ng OK
    const orderId = Number(req.params.orderId || req.query.orderId || 0);
    if (Number.isFinite(orderId) && orderId > 0) {
        try {
            order = await prisma.order.findUnique({
                where: { id: orderId },
                include: { orderDetails: { include: { product: true } } },
            });
        } catch (e) {
            console.error("getThanksPage load order error:", e);
        }
    }
    return res.render("product/thanks", { order });
}
const getOrderHistoryPage = async (req: Request, res: Response) => {
    const user = req.user;
    if (!user) return res.redirect("/login")

    const orders = await getOrderHistory(user.id)

    return res.render("product/order.history.ejs", {
        orders
    })
}
const postAddToCartFromDetailPage = async (req: Request, res: Response) => {
    const { id } = req.params;
    const { quantity } = req.body;
    const user = req.user;
    if (!user) return res.redirect("/login")

    await addProductToCart(+quantity, +id, user)

    return res.redirect(`/product/${id}`)
}

// X·ª≠ l√Ω h·ªßy ƒë∆°n
const postCancelOrder = async (req: Request, res: Response) => {
    const { id } = req.params;
    const { reason } = req.body;
    const userId = req.user?.id; // l·∫•y user t·ª´ session (passport)

    try {
        const order = await prisma.order.findUnique({ where: { id: +id } });
        if (!order) {
            return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });
        }

        // check quy·ªÅn: user ch·ªâ h·ªßy ƒë∆°n c·ªßa ch√≠nh m√¨nh
        if (order.userId !== userId) {
            return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë∆°n n√†y" });
        }

        // ch·ªâ cho ph√©p h·ªßy khi ƒëang ch·ªù x√°c nh·∫≠n
        if (order.status !== "PENDING") {
            return res.status(400).json({ message: "Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n ƒëang ch·ªù x√°c nh·∫≠n" });
        }

        await prisma.order.update({
            where: { id: +id },
            data: {
                status: "CANCELED",
                receiverNote: reason,
            },
        });

        return res.json({ success: true, message: "H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng" });
    } catch (err) {
        console.error("Cancel order error:", err);
        return res.status(500).json({ message: "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i" });
    }
};

// xem chi ti·∫øt ƒë∆°n h√†ng ·ªü ph·∫ßn tr·∫°ng th√°i
const getOrderDetailPage = async (req: Request, res: Response) => {
    const user = (req as any).user;
    const id = Number(req.params.id);

    if (!user) return res.redirect("/login");
    if (!Number.isFinite(id)) return res.status(400).send("M√£ ƒë∆°n kh√¥ng h·ª£p l·ªá");

    const order = await prisma.order.findFirst({
        where: { id, userId: user.id },
        include: {
            orderDetails: { include: { product: true } },
            user: true,
        },
    });
    if (!order) return res.status(404).render("status/404.ejs", { user });

    const canceled = order.status === "CANCELED";
    const currentStep = canceled ? -1 : ORDER_STEPS.indexOf(order.status as $Enums.OrderStatus);

    const items = order.orderDetails || [];
    // n·∫øu orderDetail c√≥ field price/quantity:
    const subTotal = items.reduce((sum, it: any) => sum + Number(it.price) * Number(it.quantity), 0);
    const discountAmount = Number(order.discountAmount || 0);
    const total = subTotal - discountAmount;

    return res.render("client/order/orderdetail.ejs", {
        user,
        order,
        items,
        subTotal,
        discountAmount,
        total,
        ORDER_STEPS,
        STATUS_LABEL_VI,
        currentStep,
        canceled,
    });
};



export { getProductPage, postAddProductToCart, getCartPage, postDeleteProductInCart, getCheckOutPage, postHandleCartToCheckOut, postPlaceOrder, getThanksPage, getOrderHistoryPage, postAddToCartFromDetailPage, postCancelOrder, getOrderDetailPage };